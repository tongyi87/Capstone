shiny::runApp('BMICalculator')
shiny::runApp('BMICalculator')
shiny::runApp('BMICalculator')
BMI Calculator
![width]('slide1-figure/screenshot.png')
L
Links
![width](slide1-figure/screenshot.png);
![Image](slide1-figure/screenshot.png)
![Image](slide1-figure/screenshot.png)
![Image](slide1-figure/screenshot.png)
Links
```
3.Report any interesting findings that you amassed so far.
4. Get feedback on your plans for creating a prediction algorithm and Shiny app.
install.packages(tm)
install.packages("tm")
cleanedBigrams <- readRDS(gzcon("https://github.com/tongyi87/Capstone/blob/f948bd64232cabd61dad5411a66a3fea3b36db72/gram/cleanedBigrams.rds?raw=true"))
cleanedBigrams <- readRDS(url("https://github.com/tongyi87/Capstone/blob/f948bd64232cabd61dad5411a66a3fea3b36db72/gram/cleanedBigrams.rds?raw=true"))
shiny::runApp('gitCapstone')
shiny::runApp('gitCapstone')
shiny::runApp('gitCapstone')
shiny::runApp('gitCapstone')
setwd("~/gitCapstone")
profanity <- read.csv(“swearWords.csv”,header=F)
profanity <- read.csv("swearWords.csv,header=F)
""
"
profanity <- read.csv("swearWords.csv",header=F)
View(profanity)
View(profanity)
profanity <- read.csv("swearWords.csv")
View(profanity)
profanity <- read.csv("swearWords.csv", header = FALSE, stringsAsFactors = FALSE)
View(profanity)
View(profanity)
View(profanity)
profanity <- read.csv("swearWords.csv", header = F, stringsAsFactors = FALSE)
profanity <- read.csv("swearWords.csv",  header=TRUE, sep=",")
View(profanity)
View(profanity)
View(profanity)
profanity <- read.csv("swearWords.csv",  header=FALSE, sep=",")
profanity <- read.csv("swearWords.csv",  header=FALSE, sep=",")
profanity <- read.csv("swearWords.csv",  header=FALSE, sep=",")
profanity <- read.csv("swearWords.csv",  header=FALSE, sep=",")
profanity <- read.csv("swearWords.csv",  header=FALSE, stringAsFactor=FALSE)
profanity <- read.csv("swearWords.csv",  header=FALSE, stringsAsFactor=FALSE)
colnames(profanity) <- c("profanity")
View(profanity)
saveRDS(profanity,"profanities.rds")
shiny::runApp()
profanities<-readRDS("profanities.rds")
View(profanities)
profanities$profanity
shiny::runApp()
cleanedBigrams<-readRDS("cleanedBigrams.rds")
cleanedTrigrams<-readRDS("cleanedTrigrams.rds")
cleanedUnigrams<-readRDS("cleanedUnigrams.rds")
profanities<-readRDS("profanities.rds")
getSearchTerms<-function(sentence){
#Cast text to lower case
cleanText <- tolower(sentence)
#Remove hashtags
cleanText <- gsub(" #\\S*","",cleanText);
#Remove URLs (http, https, ftp)
cleanText <- gsub("(f|ht)(tp)(s?)(://)(\\S*)", "", cleanText)
#Remove blank text
cleanText <- cleanText[cleanText!=""]
#Remove all punctuation
cleanText <- removePunctuation(cleanText)
#Remove all numbers
cleanText <- removeNumbers(cleanText)
#Multiple whitespace characters trimmed to a single blank
cleanText <- stripWhitespace(cleanText)
split <- strsplit(cleanText, " ")[[1]]
return(tail(split,2))
}
isNaOrEmpty<-function(text){
return (is.na(text) || text =="" || nchar(text) == 0)
}
predictWord<- function (sentence, removeProfanity = FALSE){
predictions <- data.frame(result=character(0), stringsAsFactors = FALSE)
#Empty sentence
if(isNaOrEmpty(sentence)){
return(predictions)
}
searchTerms<-getSearchTerms(sentence)
firstSearchTerm <- searchTerms[1]
secondSearchTerm <- searchTerms[2]
#No search terms
if(isNaOrEmpty(firstSearchTerm) && isNaOrEmpty(secondSearchTerm)){
return(predictions)
}
#3gram search
if(!isNaOrEmpty(firstSearchTerm) && !isNaOrEmpty(secondSearchTerm))
{
trigramSearchTerm <- paste(firstSearchTerm, secondSearchTerm, sep = " ")
trigramsResult <- cleanedTrigrams[cleanedTrigrams$search == trigramSearchTerm,]
trigramsResult <- as.data.frame(head(trigramsResult,15)[,"result"], stringsAsFactors = FALSE)
colnames(trigramsResult)[1] <- "result"
predictions <- rbind(predictions, trigramsResult)
}
bigramSearchTerm <- ifelse(isNaOrEmpty(secondSearchTerm), firstSearchTerm, secondSearchTerm)
#2gram search
bigramsResult <- cleanedBigrams[cleanedBigrams$search == bigramSearchTerm,]
bigramsResult <- bigramsResult[with(bigramsResult, order(-freq)), ]
bigramsResult <- as.data.frame(head(bigramsResult,15)[,"result"], stringsAsFactors = FALSE)
colnames(bigramsResult)[1] <- "result"
predictions <- rbind(predictions, bigramsResult)
#Append Unigram
unigramsResult <- as.data.frame(head(cleanedUnigrams,15)[,"word"], stringsAsFactors = FALSE)
colnames(unigramsResult)[1] <- "result"
predictions <- rbind(predictions, unigramsResult)
#Unique
predictions <- unique(predictions, fromLast = FALSE)
#Remove Profanity
if(removeProfanity)
{
predictions <- predictions[!predictions$result %in% profanities$profanity,]
}
#Get unique and limit to 10
predictions <- head(unique(predictions, fromLast = FALSE),10)
return (predictions)
}
test <- predictWord("the")
the[!the$result %in% profanities$profanity,]
test[!test$result %in% profanities$profanity,]
View(test)
abc<-test[!test$result %in% profanities$profanity,]
abc<-test[!test$result %in% profanities$profanity]
abc<-test[,!test$result %in% profanities$profanity]
abc<-test[!test$result %in% profanities$profanity,]
abc<-test[test$result %in% profanities$profanity,]
abc<-test[test$result %in% profanities$profanity, ,drop=F]
abc<-test[!test$result %in% profanities$profanity, ,drop=F]
View(abc)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinyBS")
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
fluidRow
shiny::runApp()
shiny::runApp()
shiny::runApp()
